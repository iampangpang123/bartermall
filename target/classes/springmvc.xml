<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">

<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射,解决@ResponseBody乱码问题, 需要在annotation-driven之前,否则乱码问题同样无法解决 -->  
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">  
        <property name="messageConverters">  
            <list>  
                <bean class="org.springframework.http.converter.StringHttpMessageConverter">  
                    <property name="supportedMediaTypes">  
                        <list>  
                            <value>text/html;charset=UTF-8</value>  
                        </list>  
                    </property>  
                </bean>  
            </list>  
        </property>  
    </bean>  
	<!-- 开启组件扫描 ，这样就不用对handler进行单个配置，可以扫描controller，service等 这里我们让扫描Controller，指定Controller的包,这样 
		注解的hanler就不用配置类路径了，方法上声明的url就是 -->
	<context:component-scan
		base-package="bartermall.controller"></context:component-scan>

	<!-- 使用 mvc:annotation-driven代替上边注解映射器和注解适配器配置 mvc:annotation-driven默认加载很多的参数绑定方法， 
		比如json转换解析器就默认加载了，如果使用mvc:annotation-driven不用配置上边的RequestMappingHandlerMapping和RequestMappingHandlerAdapter 
		实际开发时使用 <mvc:annotation-driven></mvc:annotation-driven> -->

	<mvc:annotation-driven />
	<mvc:resources location="/imgs/" mapping="/imgs/**" />
	<mvc:resources location="/imgs2/" mapping="/imgs2/**" />
	<mvc:resources location="/imgs_products/" mapping="//imgs_products//**" />
	<mvc:resources location="/js/" mapping="/js/**" />
	<mvc:resources location="/webapp_js/" mapping="/webapp_js/**" />
	<mvc:resources location="/css/" mapping="/css/**" />
	
	<!-- 视图解析器 解析jsp解析，默认使用jstl标签，classpath下的得有jstl的包 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 配置jsp路径的前缀 -->
		<property name="prefix" value="/" />
		<!-- 配置jsp路径的后缀 -->
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- 异常处理器 -->
	<!-- <bean id="handlerExceptionResolver"
		class="barterplatform.user.exception.UserExceptionResolver" /> -->
	<!-- 文件上传 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 设置上传文件的最大尺寸为5MB -->
		<property name="maxUploadSize">
			<value>5242880</value>
		</property>
	</bean>
	<!-- 配置自定义的拦截器 -->
	<!-- <mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<mvc:exclude-mapping path="/login.action" />
			<mvc:exclude-mapping path="/regist.action" />
			<mvc:exclude-mapping path="/verifyCode.action" />
			<bean
				class="barterplatform.user.web.interceptor.LoginInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors> -->


</beans>